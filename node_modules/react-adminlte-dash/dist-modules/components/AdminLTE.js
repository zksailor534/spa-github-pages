'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Bootstrap variable for re-render to small screen mode
var screenSmMin = 768;

var AdminLTE = function (_React$Component) {
  _inherits(AdminLTE, _React$Component);

  function AdminLTE(props) {
    _classCallCheck(this, AdminLTE);

    var _this = _possibleConstructorReturn(this, (AdminLTE.__proto__ || Object.getPrototypeOf(AdminLTE)).call(this, props));

    _this.state = {
      screenSm: window.innerWidth < screenSmMin
    };
    return _this;
  }

  _createClass(AdminLTE, [{
    key: 'componentDidMount',
    value: function componentDidMount() {
      window.addEventListener('resize', this.handleResize.bind(this));
    }
  }, {
    key: 'componentWillUnmount',
    value: function componentWillUnmount() {
      window.removeEventListener('resize', this.handleResize.bind(this));
    }
  }, {
    key: 'handleResize',
    value: function handleResize() {
      this.setState({
        screenSm: typeof window !== 'undefined' ? window.innerWidth < screenSmMin : undefined
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var skinClass = null;
      var layoutClass = null;

      // Skin color class
      switch (this.props.skin) {
        case 'blue':
          skinClass = 'skin-blue';
          break;
        case 'black':
          skinClass = 'skin-black';
          break;
        case 'purple':
          skinClass = 'skin-purple';
          break;
        case 'green':
          skinClass = 'skin-green';
          break;
        case 'red':
          skinClass = 'skin-red';
          break;
        case 'yellow':
          skinClass = 'skin-yellow';
          break;
        case 'blue-light':
          skinClass = 'skin-blue-light';
          break;
        case 'black-light':
          skinClass = 'skin-black-light';
          break;
        case 'purple-light':
          skinClass = 'skin-purple-light';
          break;
        case 'green-light':
          skinClass = 'skin-green-light';
          break;
        case 'red-light':
          skinClass = 'skin-red-light';
          break;
        case 'yellow-light':
          skinClass = 'skin-yellow-light';
          break;
        default:
          skinClass = 'skin-blue';
      }

      // Layout class
      switch (this.props.layout) {
        case 'fixed':
          layoutClass = 'fixed';
          break;
        case 'boxed':
          layoutClass = 'layout-boxed';
          break;
        case 'nav-on-top':
          layoutClass = 'layout-top-nav';
          break;
        default:
          layoutClass = '';
      }

      return _react2.default.createElement(
        'div',
        {
          className: (0, _classnames2.default)('hold-transition', skinClass, { 'sidebar-mini': this.props.sidebarMini }, { 'sidebar-collapse': !this.state.screenSm && this.props.sidebarCollapsed }, { 'sidebar-open': this.state.screenSm && !this.props.sidebarCollapsed }, layoutClass),
          id: 'adminlte_core'
        },
        _react2.default.createElement(
          'div',
          { className: 'wrapper' },
          this.props.children
        )
      );
    }
  }]);

  return AdminLTE;
}(_react2.default.Component);

process.env.NODE_ENV !== "production" ? AdminLTE.propTypes = {
  children: _react2.default.PropTypes.node,
  skin: _react2.default.PropTypes.string,
  sidebarMini: _react2.default.PropTypes.bool,
  layout: _react2.default.PropTypes.string,
  sidebarCollapsed: _react2.default.PropTypes.bool
} : void 0;

AdminLTE.defaultProps = {
  skin: 'blue',
  sidebarMini: false,
  sidebarCollapsed: false
};

exports.default = AdminLTE;