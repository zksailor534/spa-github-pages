'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Navbar Dropdown Type Options
// messages: fa-envelope-o
// notifications: fa-bell-o
// tasks: fa-flag-o

// Nav Dropdown label color Options
// red: label-danger
// yellow: label-warning
// green: label-success

var DropdownMenu = function (_React$Component) {
  _inherits(DropdownMenu, _React$Component);

  function DropdownMenu(props) {
    _classCallCheck(this, DropdownMenu);

    var _this = _possibleConstructorReturn(this, (DropdownMenu.__proto__ || Object.getPrototypeOf(DropdownMenu)).call(this, props));

    _this.state = {
      open: false
    };
    _this._toggleMenu = _this.toggleMenu.bind(_this);
    return _this;
  }

  _createClass(DropdownMenu, [{
    key: 'toggleMenu',
    value: function toggleMenu() {
      this.setState({
        open: !this.state.open
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var menuClass = void 0;
      var menuIcon = null;
      var label = null;

      // Menu type
      switch (this.props.type) {
        case 'messages':
          menuClass = 'dropdown messages-menu';
          menuIcon = _react2.default.createElement('i', { className: 'fa fa-envelope-o' });
          break;
        case 'notifications':
          menuClass = 'dropdown notifications-menu';
          menuIcon = _react2.default.createElement('i', { className: 'fa fa-bell-o' });
          break;
        case 'tasks':
          menuClass = 'dropdown tasks-menu';
          menuIcon = _react2.default.createElement('i', { className: 'fa fa-flag-o' });
          break;
        default:
          menuClass = '';
      }

      // Label
      if (this.props.labelText) {
        switch (this.props.labelColor) {
          case 'red':
            label = _react2.default.createElement(
              'span',
              { className: 'label label-danger' },
              this.props.labelText
            );
            break;
          case 'yellow':
            label = _react2.default.createElement(
              'span',
              { className: 'label label-warning' },
              this.props.labelText
            );
            break;
          case 'green':
            label = _react2.default.createElement(
              'span',
              { className: 'label label-success' },
              this.props.labelText
            );
            break;
          default:
            label = _react2.default.createElement(
              'span',
              { className: 'label' },
              this.props.labelText
            );
            break;
        }
      }

      return _react2.default.createElement(
        'li',
        {
          className: (0, _classnames2.default)(menuClass, { open: this.state.open })
        },
        _react2.default.createElement(
          'a',
          {
            className: 'dropdown-toggle',
            'data-toggle': 'dropdown',
            href: this.props.link,
            onClick: this._toggleMenu
          },
          menuIcon,
          label
        ),
        _react2.default.createElement(
          'ul',
          { className: 'dropdown-menu' },
          this.props.children
        )
      );
    }
  }]);

  return DropdownMenu;
}(_react2.default.Component);

process.env.NODE_ENV !== "production" ? DropdownMenu.propTypes = {
  children: _react2.default.PropTypes.node,
  link: _react2.default.PropTypes.string,
  type: _react2.default.PropTypes.string,
  labelColor: _react2.default.PropTypes.string,
  labelText: _react2.default.PropTypes.string
} : void 0;

DropdownMenu.defaultProps = {
  link: '/',
  type: 'messages'
};

exports.default = DropdownMenu;