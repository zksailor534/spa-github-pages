'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _classnames = require('classnames');

var _classnames2 = _interopRequireDefault(_classnames);

var _reactBootstrap = require('react-bootstrap');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

// Left Icon Options
// plain: fa-circle-o
// important: fa-circle-o text-red
// warning: fa-circle-o text-yellow
// information: fa-circle-o text-aqua
// none: ---
// any other call fontawesome class

// labelType Options (right icon)
// important: red
// warning: yellow
// information: aqua
// green: green
// none: ---

var SidebarMenuItem = function (_React$Component) {
  _inherits(SidebarMenuItem, _React$Component);

  function SidebarMenuItem(props) {
    _classCallCheck(this, SidebarMenuItem);

    var _this = _possibleConstructorReturn(this, (SidebarMenuItem.__proto__ || Object.getPrototypeOf(SidebarMenuItem)).call(this, props));

    _this.state = {
      active: _this.props.active
    };
    _this._toggleMenu = _this.toggleMenu.bind(_this);
    return _this;
  }

  _createClass(SidebarMenuItem, [{
    key: 'toggleMenu',
    value: function toggleMenu() {
      this.setState({
        active: !this.state.active
      });
    }
  }, {
    key: 'render',
    value: function render() {
      var leftIcon = null;
      var rightIcon = null;
      var subMenu = null;

      switch (this.props.mainIcon) {
        case 'plain':
          leftIcon = _react2.default.createElement('i', { className: 'fa fa-circle-o' });
          break;
        case 'important':
          leftIcon = _react2.default.createElement('i', { className: 'fa fa-circle-o text-red' });
          break;
        case 'warning':
          leftIcon = _react2.default.createElement('i', { className: 'fa fa-circle-o text-yellow' });
          break;
        case 'information':
          leftIcon = _react2.default.createElement('i', { className: 'fa fa-circle-o text-aqua' });
          break;
        case 'none':
          break;
        default:
          leftIcon = _react2.default.createElement('i', { className: (0, _classnames2.default)('fa', this.props.mainIcon) });
      }

      // Deal with right icon
      switch (this.props.labelType) {
        case 'important':
          rightIcon = _react2.default.createElement(
            'small',
            { className: 'label pull-right bg-red' },
            this.props.labelText
          );
          break;
        case 'warning':
          rightIcon = _react2.default.createElement(
            'small',
            { className: 'label pull-right bg-yellow' },
            this.props.labelText
          );
          break;
        case 'information':
          rightIcon = _react2.default.createElement(
            'small',
            { className: 'label label-primary pull-right' },
            this.props.labelText
          );
          break;
        case 'green':
          rightIcon = _react2.default.createElement(
            'small',
            { className: 'label pull-right bg-green' },
            this.props.labelText
          );
          break;
        default:
          if (this.props.children) {
            rightIcon = _react2.default.createElement('i', { className: 'fa fa-angle-left pull-right' });
          }
      }

      // Deal with submenu
      if (this.props.children) {
        subMenu = _react2.default.createElement(
          _reactBootstrap.Collapse,
          { 'in': this.state.active },
          _react2.default.createElement(
            'ul',
            { className: 'treeview-menu' },
            this.props.children
          )
        );
      }

      return _react2.default.createElement(
        'li',
        {
          className: (0, _classnames2.default)({ treeview: this.props.children }, { active: this.state.active })
        },
        _react2.default.createElement(
          'a',
          { href: this.props.link, onClick: this._toggleMenu },
          leftIcon,
          _react2.default.createElement(
            'span',
            null,
            this.props.title
          ),
          rightIcon
        ),
        subMenu
      );
    }
  }]);

  return SidebarMenuItem;
}(_react2.default.Component);

process.env.NODE_ENV !== "production" ? SidebarMenuItem.propTypes = {
  children: _react2.default.PropTypes.node,
  title: _react2.default.PropTypes.string,
  link: _react2.default.PropTypes.string,
  mainIcon: _react2.default.PropTypes.string,
  active: _react2.default.PropTypes.bool,
  labelType: _react2.default.PropTypes.string,
  labelText: _react2.default.PropTypes.string
} : void 0;

SidebarMenuItem.defaultProps = {
  title: 'Tree-View',
  link: '/',
  mainIcon: 'plain',
  active: false,
  labelText: ''
};

exports.default = SidebarMenuItem;